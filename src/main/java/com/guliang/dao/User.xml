<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guliang.dao.UserMapper">
    <!--注意：上面的namespace的值为com.zf.mybatis.pojo.UserMapper，可以自定义 ，UserMapper不是一个类，不需要存在的。-->
    <!--另外，mybatis会将从数据库查询出来的记录根据列名与pojo中的字段进行匹配， 所以上面的user_name，user_age ,user_address这几个字段都取了别名，跟pojo中的字段相对应。 如果不起别名， 查询出来的对象，这几个字段是没有值的。-->
    <resultMap id="userResult" type="com.guliang.pojo.User">
        <result property="id" column="id"></result>
        <result property="userName" column="user_name"></result>
        <result property="userAge" column="user_age"></result>
        <result property="userAdress" column="user_address"></result>
        <result property="password" column="password"></result>
     </resultMap>

    <!-- 使用sql标签可以将公共的sql提取出来复用 -->
    <!--<sql id="queryFields">-->
        <!--id , password , user_name as userName , user_age as userAge , user_address as userAddress-->
    <!--</sql>-->
    <!---->

    <select id="selectUserDetail" parameterType="int" resultMap="userResult">
        select * FROM `user`
    </select>

    <insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id" >
        insert into `user`
        (password , user_name , user_age , user_address)
        values(#{password} , #{userName} , #{userAge} , #{userAddress} )
    </insert>

    <update id="updateUserById" parameterType="User" >
        update `user`
        set password = #{password} , user_name = #{userName}, user_age = #{userAge}, user_address = #{userAddress}
        where id = #{id}
    </update>

    <delete id="deleteUserById" parameterType="int">
        delete from `user` where id = #{id}
    </delete>
</mapper>

